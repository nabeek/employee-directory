{"version":3,"sources":["components/Hero/index.js","utils/API.js","components/Search/index.js","components/Table/index.js","components/DirectoryContainer/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Hero","class","axios","get","Search","props","className","value","onChange","handleInputChange","name","type","placeholder","style","verticalAlign","EmployeeList","results","undefined","filteredEmployees","employees","onClick","handleSort","cursor","textAlign","map","result","key","login","salt","alt","first","src","picture","large","last","email","location","city","state","cell","dob","age","DirectoryContainer","sort","loadEmployees","API","then","res","setState","data","event","target","filteredList","filter","employee","toLowerCase","indexOf","ascendingList","a","b","descendingList","console","log","this","Table","Component","Footer","href","Date","getFullYear","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.22d0c242.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Hero() {\n  return (\n    <section class=\"hero is-primary m-b3\">\n      <div class=\"hero-body\">\n        <div class=\"container\">\n          <h1 class=\"title\">Employee Directory</h1>\n          <h2 class=\"subtitle\">\n            A lightweight, React-based application for viewing, sorting, and\n            searching employee information\n          </h2>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default Hero;\n","import axios from \"axios\";\n\nexport default {\n  getEmployees: function () {\n    return axios.get(\"https://randomuser.me/api/?results=35&nat=US\");\n  },\n};\n","import React from \"react\";\nimport \"./style.css\";\nimport { FaSort } from \"react-icons/fa\";\n\nfunction Search(props) {\n  return (\n    <div className=\"columns is-centered\">\n      <div className=\"column is-4\">\n        <div className=\"field\">\n          <input\n            value={props.value}\n            onChange={props.handleInputChange}\n            name=\"search\"\n            type=\"text\"\n            className=\"input\"\n            placeholder=\"Search employee names\"\n          />\n          <p className=\"has-text-centered m-t1 m-b1\">\n            Click on the <FaSort style={{ verticalAlign: \"middle\" }} /> to sort\n            alphabetically by name\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n","import React from \"react\";\nimport \"./style.css\";\nimport { FaSort } from \"react-icons/fa\";\n\nfunction EmployeeList(props) {\n  // Use a ternary to assign a particular set of employees, and then map that list\n  // This reduces the amount of code needed in the tbody\n  let results;\n  props.filteredEmployees[0] !== undefined\n    ? (results = props.filteredEmployees)\n    : (results = props.employees);\n\n  // Return the structured table and map the employees based on initial load or filtered list\n  return (\n    <div className=\"columns is-centered\">\n      <div className=\"column is-10\">\n        <table className=\"table is-fullwidth\">\n          <thead>\n            <tr>\n              <th>Headshot</th>\n              <th>\n                Name {\"  \"}\n                <FaSort\n                  onClick={props.handleSort}\n                  style={{ cursor: \"pointer\", verticalAlign: \"middle\" }}\n                />\n              </th>\n              <th>Email</th>\n              <th>Location</th>\n              <th>Cell Number</th>\n              <th style={{ textAlign: \"center\" }}>Age</th>\n            </tr>\n          </thead>\n          <tbody>\n            {results.map(result => (\n              // Add a key to each entry to enable sorting and filtering\n              <tr key={result.login.salt}>\n                <td>\n                  <img alt={result.name.first} src={result.picture.large} />\n                </td>\n                <td>\n                  {result.name.first} {result.name.last}\n                </td>\n                <td>{result.email}</td>\n                <td>\n                  {result.location.city}, {result.location.state}\n                </td>\n                <td>{result.cell}</td>\n                <td style={{ textAlign: \"center\" }}>{result.dob.age}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\nexport default EmployeeList;\n","import React, { Component } from \"react\";\nimport API from \"../../utils/API\";\nimport Search from \"../Search\";\nimport Table from \"../Table\";\n\nclass DirectoryContainer extends Component {\n  state = {\n    employees: [],\n    filteredEmployees: [],\n    sort: \"ascending\",\n  };\n\n  componentDidMount() {\n    this.loadEmployees();\n  }\n\n  loadEmployees = () => {\n    API.getEmployees().then(res => {\n      this.setState({ employees: res.data.results });\n    });\n  };\n\n  handleInputChange = event => {\n    const value = event.target.value;\n    const filteredList = this.state.employees.filter(employee => {\n      let names =\n        employee.name.first.toLowerCase() +\n        \" \" +\n        employee.name.last.toLowerCase();\n\n      // The API responses for first and last name are searched using the input value\n      // Any match is returned, regardless of value length, but no matches will return the full list\n      if (names.indexOf(value.toLowerCase()) !== -1) {\n        return employee;\n      }\n    });\n\n    // Replace the array of filteredEmployees (initially empty) with the list above\n    this.setState({\n      filteredEmployees: !value ? [] : filteredList,\n    });\n  };\n\n  handleSort = () => {\n    // Use a ternary to select a specific array of employees, to enable sorting after filtering\n    let employees;\n    this.state.filteredEmployees[0] !== undefined\n      ? (employees = this.state.filteredEmployees)\n      : (employees = this.state.employees);\n\n    // Switch statement alternates between ascending/descending sorting by using state\n    switch (this.state.sort) {\n      case \"ascending\":\n        const ascendingList = employees.sort((a, b) => {\n          return a.name.first < b.name.first ? -1 : 1;\n        });\n        this.setState({\n          filteredEmployees: ascendingList,\n        });\n        this.setState({ sort: \"descending\" });\n        break;\n      case \"descending\":\n        const descendingList = employees.sort((a, b) => {\n          return a.name.first < b.name.first ? 1 : -1;\n        });\n        this.setState({\n          filteredEmployees: descendingList,\n        });\n        this.setState({ sort: \"ascending\" });\n        break;\n      default:\n        console.log(\"An error has occurred.\");\n        break;\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Search handleInputChange={this.handleInputChange} />\n        <Table\n          employees={this.state.employees}\n          filteredEmployees={this.state.filteredEmployees}\n          handleSort={this.handleSort}\n        />\n      </div>\n    );\n  }\n}\n\nexport default DirectoryContainer;\n","import React from \"react\";\nimport \"./style.css\";\nimport { FaGithub } from \"react-icons/fa\";\n\nfunction Footer() {\n  return (\n    <footer class=\"footer m-t5\">\n      <div class=\"content has-text-centered\">\n        <a href=\"https://github.com/nabeek/employee-directory\" target=\"_blank\">\n          <small>\n            <FaGithub /> GitHub Repo\n          </small>\n        </a>\n        <p>\n          <small>\n            <a href=\"https://github.com/nabeek\" target=\"_blank\">\n              nabeek made this\n            </a>\n            , copyright &copy; {new Date().getFullYear()}\n          </small>\n        </p>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport Hero from \"./components/Hero\";\nimport DirectoryContainer from \"./components/DirectoryContainer\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  return (\n    <>\n      <Hero className=\"mb-3\" />\n      <DirectoryContainer />\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}